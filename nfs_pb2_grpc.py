# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nfs_pb2 as nfs__pb2


class NFSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Open = channel.unary_unary(
                '/nfs.NFS/Open',
                request_serializer=nfs__pb2.FileReq.SerializeToString,
                response_deserializer=nfs__pb2.FileRes.FromString,
                )
        self.Create = channel.unary_unary(
                '/nfs.NFS/Create',
                request_serializer=nfs__pb2.FileReq.SerializeToString,
                response_deserializer=nfs__pb2.FileRes.FromString,
                )
        self.Read = channel.unary_unary(
                '/nfs.NFS/Read',
                request_serializer=nfs__pb2.ReadReq.SerializeToString,
                response_deserializer=nfs__pb2.ReadRes.FromString,
                )
        self.Write = channel.unary_unary(
                '/nfs.NFS/Write',
                request_serializer=nfs__pb2.WriteReq.SerializeToString,
                response_deserializer=nfs__pb2.WriteRes.FromString,
                )
        self.Lseek = channel.unary_unary(
                '/nfs.NFS/Lseek',
                request_serializer=nfs__pb2.LseekReq.SerializeToString,
                response_deserializer=nfs__pb2.LseekRes.FromString,
                )
        self.Close = channel.unary_unary(
                '/nfs.NFS/Close',
                request_serializer=nfs__pb2.CloseReq.SerializeToString,
                response_deserializer=nfs__pb2.CloseRes.FromString,
                )


class NFSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lseek(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NFSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Open': grpc.unary_unary_rpc_method_handler(
                    servicer.Open,
                    request_deserializer=nfs__pb2.FileReq.FromString,
                    response_serializer=nfs__pb2.FileRes.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=nfs__pb2.FileReq.FromString,
                    response_serializer=nfs__pb2.FileRes.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=nfs__pb2.ReadReq.FromString,
                    response_serializer=nfs__pb2.ReadRes.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=nfs__pb2.WriteReq.FromString,
                    response_serializer=nfs__pb2.WriteRes.SerializeToString,
            ),
            'Lseek': grpc.unary_unary_rpc_method_handler(
                    servicer.Lseek,
                    request_deserializer=nfs__pb2.LseekReq.FromString,
                    response_serializer=nfs__pb2.LseekRes.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=nfs__pb2.CloseReq.FromString,
                    response_serializer=nfs__pb2.CloseRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nfs.NFS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NFS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/Open',
            nfs__pb2.FileReq.SerializeToString,
            nfs__pb2.FileRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/Create',
            nfs__pb2.FileReq.SerializeToString,
            nfs__pb2.FileRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/Read',
            nfs__pb2.ReadReq.SerializeToString,
            nfs__pb2.ReadRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/Write',
            nfs__pb2.WriteReq.SerializeToString,
            nfs__pb2.WriteRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lseek(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/Lseek',
            nfs__pb2.LseekReq.SerializeToString,
            nfs__pb2.LseekRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nfs.NFS/Close',
            nfs__pb2.CloseReq.SerializeToString,
            nfs__pb2.CloseRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
